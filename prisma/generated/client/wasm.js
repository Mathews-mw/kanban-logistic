
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  defaultCompanyId: 'defaultCompanyId',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otpHash: 'otpHash',
  used: 'used',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  vatNumber: 'vatNumber',
  email: 'email',
  phone: 'phone',
  country: 'country',
  city: 'city',
  postalCode: 'postalCode',
  address1: 'address1',
  address2: 'address2',
  roles: 'roles',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCompanyMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  roles: 'roles',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.DeliveryPlantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country',
  city: 'city',
  postalCode: 'postalCode',
  address1: 'address1',
  address2: 'address2',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  plateNumber: 'plateNumber',
  vehicleType: 'vehicleType',
  tareWeight: 'tareWeight',
  maxLoadKg: 'maxLoadKg',
  transporterId: 'transporterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  unit: 'unit',
  density: 'density',
  supplierId: 'supplierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  number: 'number',
  supplierId: 'supplierId',
  customerId: 'customerId',
  transporterId: 'transporterId',
  vehicleId: 'vehicleId',
  deliveryPlantId: 'deliveryPlantId',
  productId: 'productId',
  externalCode: 'externalCode',
  direction: 'direction',
  status: 'status',
  grossWeight: 'grossWeight',
  tareWeight: 'tareWeight',
  netWeight: 'netWeight',
  unit: 'unit',
  notes: 'notes',
  meta: 'meta',
  weighedAt: 'weighedAt',
  shareToken: 'shareToken',
  sharedAt: 'sharedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketDocumentScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  type: 'type',
  path: 'path',
  createdAt: 'createdAt'
};

exports.Prisma.TicketEventLogScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  actorId: 'actorId',
  action: 'action',
  from: 'from',
  to: 'to',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.TicketSequenceScalarFieldEnum = {
  id: 'id',
  yearMonth: 'yearMonth',
  counter: 'counter',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  keyHash: 'keyHash',
  companyId: 'companyId',
  lastUsedAt: 'lastUsedAt',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ImportJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  entity: 'entity',
  mapping: 'mapping',
  source: 'source',
  success: 'success',
  stats: 'stats',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  DEFAULT: 'DEFAULT',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  CUSTOMER: 'CUSTOMER'
};

exports.CompanyRole = exports.$Enums.CompanyRole = {
  SUPPLIER: 'SUPPLIER',
  CUSTOMER: 'CUSTOMER',
  TRANSPORTER: 'TRANSPORTER',
  VIEWER: 'VIEWER'
};

exports.MembershipRole = exports.$Enums.MembershipRole = {
  ADMIN: 'ADMIN',
  SUPPLIER: 'SUPPLIER',
  CUSTOMER: 'CUSTOMER',
  TRANSPORTER: 'TRANSPORTER',
  VIEWER: 'VIEWER'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  DRAFT: 'DRAFT',
  READY: 'READY',
  SHARED: 'SHARED',
  ARCHIVED: 'ARCHIVED',
  PENDING_REGISTRATION: 'PENDING_REGISTRATION',
  AVAILABLE: 'AVAILABLE',
  DOWNLOADED: 'DOWNLOADED',
  CANCELED: 'CANCELED'
};

exports.TicketDirection = exports.$Enums.TicketDirection = {
  IN: 'IN',
  OUT: 'OUT'
};

exports.DocType = exports.$Enums.DocType = {
  XML: 'XML',
  PDF: 'PDF'
};

exports.Prisma.ModelName = {
  User: 'User',
  Otp: 'Otp',
  Company: 'Company',
  UserCompanyMembership: 'UserCompanyMembership',
  DeliveryPlant: 'DeliveryPlant',
  Vehicle: 'Vehicle',
  Product: 'Product',
  Ticket: 'Ticket',
  TicketDocument: 'TicketDocument',
  TicketEventLog: 'TicketEventLog',
  TicketSequence: 'TicketSequence',
  ApiKey: 'ApiKey',
  ImportJob: 'ImportJob'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\code-everything\\work-projects\\kanban-logistic\\prisma\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\code-everything\\work-projects\\kanban-logistic\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  DEFAULT\n  ADMIN\n  MODERATOR\n  CUSTOMER\n}\n\nenum CompanyRole {\n  SUPPLIER // Fornecedor (quem envia tickets)\n  CUSTOMER // Cliente (quem recebe tickets)\n  TRANSPORTER // Transportadora\n  VIEWER\n}\n\nenum MembershipRole {\n  ADMIN\n  SUPPLIER\n  CUSTOMER\n  TRANSPORTER\n  VIEWER\n}\n\nenum TicketStatus {\n  DRAFT\n  READY\n  SHARED\n  ARCHIVED\n  PENDING_REGISTRATION // VAT do destino ainda não existe na plataforma\n  AVAILABLE // Disponível para o destinatário\n  DOWNLOADED // Já baixado/consumido\n  CANCELED\n}\n\nenum TicketDirection {\n  IN // Entrada\n  OUT // Saída\n}\n\nenum DocType {\n  XML\n  PDF\n}\n\nmodel User {\n  id               String    @id @default(cuid())\n  email            String    @unique\n  name             String\n  password         String?\n  defaultCompanyId String?   @map(\"default_company_id\")\n  role             UserRole  @default(DEFAULT)\n  isActive         Boolean   @default(true) @map(\"is_active\")\n  createdAt        DateTime  @default(now()) @map(\"created_at\")\n  updatedAt        DateTime? @updatedAt @map(\"updated_at\")\n\n  defaultCompany Company? @relation(\"DefaultCompany\", fields: [defaultCompanyId], references: [id])\n\n  memberships  UserCompanyMembership[]\n  importJobs   ImportJob[]\n  ticketEvents TicketEventLog[]\n\n  @@map(\"users\")\n}\n\nmodel Otp {\n  id        String   @id @default(cuid())\n  email     String\n  otpHash   String   @map(\"otp_hash\")\n  used      Boolean  @default(false)\n  expiresAt DateTime @map(\"expires_at\")\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  @@unique([email, otpHash])\n  @@map(\"otp\")\n}\n\nmodel Company {\n  id         String        @id @default(cuid())\n  name       String\n  vatNumber  String        @unique @map(\"vat_number\") // identificador universal (Peppol-like)\n  email      String?\n  phone      String?\n  country    String?\n  city       String?\n  postalCode String?       @map(\"postal_code\")\n  address1   String?       @map(\"address_1\")\n  address2   String?       @map(\"address_2\")\n  roles      CompanyRole[] // no nível da empresa\n  isActive   Boolean       @default(true) @map(\"is_active\")\n  createdAt  DateTime      @default(now()) @map(\"created_at\")\n  updatedAt  DateTime?     @updatedAt @map(\"updated_at\")\n\n  memberships        UserCompanyMembership[]\n  DefaultCompany     User[]                  @relation(\"DefaultCompany\")\n  deliveryPlants     DeliveryPlant[]\n  vehicles           Vehicle[]               @relation(\"TransporterVehicles\")\n  suppliedProducts   Product[]               @relation(\"SupplierProducts\")\n  sentTickets        Ticket[]                @relation(\"SupplierTickets\")\n  customerTickets    Ticket[]                @relation(\"CustomerTickets\")\n  transporterTickets Ticket[]                @relation(\"TransporterTickets\")\n  apiKeys            ApiKey[]\n  importJobs         ImportJob[]\n\n  @@index([name])\n  @@map(\"companies\")\n}\n\nmodel UserCompanyMembership {\n  id        String           @id @default(cuid())\n  userId    String           @map(\"user_id\")\n  companyId String           @map(\"company_id\")\n  roles     MembershipRole[] // papéis do usuário neste tenant\n  isActive  Boolean          @default(true) @map(\"is_active\")\n  createdAt DateTime         @default(now()) @map(\"created_at\")\n\n  user    User    @relation(fields: [userId], references: [id])\n  company Company @relation(fields: [companyId], references: [id])\n\n  @@unique([userId, companyId])\n  @@map(\"user_company_memberships\")\n}\n\nmodel DeliveryPlant {\n  id         String    @id @default(cuid())\n  name       String\n  country    String?\n  city       String?\n  postalCode String?   @map(\"postal_code\")\n  address1   String?   @map(\"address_1\")\n  address2   String?   @map(\"address_2\")\n  companyId  String    @map(\"company_id\") // cliente “dono” do local\n  createdAt  DateTime  @default(now()) @map(\"created_at\")\n  updatedAt  DateTime? @updatedAt @map(\"updated_at\")\n\n  company Company @relation(fields: [companyId], references: [id])\n\n  tickets Ticket[]\n\n  @@unique([companyId, name]) // <- evita duplicatas por empresa+nome\n  @@index([companyId, name])\n  @@map(\"delivery_plants\")\n}\n\n// Plaat.csv\nmodel Vehicle {\n  id            String    @id @default(cuid())\n  plateNumber   String    @unique @map(\"plate_number\")\n  vehicleType   String?   @map(\"vehicle_type\")\n  tareWeight    Int?      @map(\"tare_weight\")\n  maxLoadKg     Int?      @map(\"max_load_kg\")\n  transporterId String    @map(\"transporter_id\") // transportadora dona do veículo\n  createdAt     DateTime  @default(now()) @map(\"created_at\")\n  updatedAt     DateTime? @updatedAt @map(\"updated_at\")\n\n  transporter Company @relation(\"TransporterVehicles\", fields: [transporterId], references: [id])\n\n  tickets Ticket[]\n\n  @@map(\"vehicles\")\n}\n\n// Artikel.csv\nmodel Product {\n  id          String    @id @default(cuid())\n  code        String    @unique\n  description String\n  unit        String? // ex.: \"T\" (ton), \"KG\", \"M3\"\n  density     Float?\n  supplierId  String?   @map(\"supplier_id\") // opcional: quem fornece\n  createdAt   DateTime  @default(now()) @map(\"created_at\")\n  updatedAt   DateTime? @updatedAt @map(\"updated_at\")\n\n  supplier Company? @relation(\"SupplierProducts\", fields: [supplierId], references: [id])\n\n  tickets Ticket[]\n\n  @@index([description])\n  @@map(\"products\")\n}\n\n// Registro de pesagem + roteamento por VAT\nmodel Ticket {\n  id              String          @id @default(cuid())\n  number          String          @unique\n  supplierId      String          @map(\"supplier_id\") // quem enviou o ticket (fornecedor)\n  customerId      String          @map(\"customer_id\") // destinatário (cliente)\n  transporterId   String          @map(\"transporter_id\") // transportadora (opcional)\n  vehicleId       String          @map(\"vehicle_id\")\n  deliveryPlantId String          @map(\"delivery_plant_id\") // Werf\n  productId       String          @map(\"product\")\n  externalCode    String?         @map(\"external_code\") // referência do ERP/WB (opcional)\n  direction       TicketDirection\n  status          TicketStatus    @default(DRAFT)\n  // Pesos (kg)\n  grossWeight     Float?          @map(\"gross_weight_kg\")\n  tareWeight      Float?          @map(\"tare_weight_kg\")\n  netWeight       Float?          @map(\"net_weight_kg\") // netWeightKg = bruto - tara (peso líquido)\n  unit            String? // \"KG\" | \"T\"\n  notes           String?\n  meta            Json? // Observações / metadados livres (útil para campos extras do CSV)\n  weighedAt       DateTime?       @default(now()) @map(\"weighed_at\") // data/hora da pesagem\n  shareToken      String?         @map(\"share_token\")\n  sharedAt        DateTime?       @map(\"shared_at\")\n  createdAt       DateTime        @default(now()) @map(\"created_at\")\n  updatedAt       DateTime?       @updatedAt @map(\"updated_at\")\n\n  // Ligações principais (todas via VAT → Company):\n  supplier      Company       @relation(\"SupplierTickets\", fields: [supplierId], references: [id])\n  customer      Company       @relation(\"CustomerTickets\", fields: [customerId], references: [id])\n  transporter   Company       @relation(\"TransporterTickets\", fields: [transporterId], references: [id])\n  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])\n  deliveryPlant DeliveryPlant @relation(fields: [deliveryPlantId], references: [id])\n  product       Product       @relation(fields: [productId], references: [id])\n\n  documents TicketDocument[] // Documentos (XML/PDF)\n  events    TicketEventLog[]\n\n  @@index([supplierId, createdAt])\n  @@index([customerId, createdAt])\n  @@index([transporterId, createdAt])\n  @@index([deliveryPlantId])\n  @@index([vehicleId])\n  @@index([productId])\n  @@index([status])\n  @@map(\"tickets\")\n}\n\nmodel TicketDocument {\n  id        String   @id @default(cuid())\n  ticketId  String   @map(\"ticket_id\")\n  type      DocType\n  path      String // ex.: s3://bucket/key.pdf (MVP: local)\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  ticket Ticket @relation(fields: [ticketId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n\n  @@index([ticketId, type])\n  @@map(\"ticket_documents\")\n}\n\nmodel TicketEventLog {\n  id        String   @id @default(cuid())\n  ticketId  String   @map(\"ticket_id\")\n  actorId   String   @map(\"actor_id\")\n  action    String // \"STATUS_CHANGE\" | \"EDIT\" | ...\n  from      String?\n  to        String?\n  meta      Json?\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  ticket Ticket @relation(fields: [ticketId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n  actor  User   @relation(fields: [actorId], references: [id])\n\n  @@index([ticketId])\n  @@map(\"ticket_event_logs\")\n}\n\n/**\n * Sequência mensal para numeração de ticket (YYYYMM-000001)\n */\nmodel TicketSequence {\n  id        String    @id @default(cuid())\n  yearMonth String    @unique @map(\"year_month\") // \"202510\"\n  counter   Int       @default(0)\n  createdAt DateTime  @default(now()) @map(\"created_at\")\n  updatedAt DateTime? @updatedAt @map(\"updated_at\")\n\n  @@map(\"ticket_sequences\")\n}\n\nmodel ApiKey {\n  id         String    @id @default(cuid())\n  name       String?\n  keyHash    String    @map(\"key_hash\") // NUNCA salvar plaintext — guarde hash\n  companyId  String    @map(\"company_id\")\n  lastUsedAt DateTime? @map(\"last_used_at\")\n  revokedAt  DateTime? @map(\"revoked_at\")\n  createdAt  DateTime  @default(now()) @map(\"created_at\")\n\n  company Company @relation(fields: [companyId], references: [id])\n\n  @@index([companyId])\n  @@index([lastUsedAt])\n  @@map(\"api_keys\")\n}\n\n// Controle de importação CSV + mapeamento “Zapier-like”\nmodel ImportJob {\n  id          String    @id @default(cuid())\n  userId      String?   @map(\"user_id\") // quem disparou a import (opcional)\n  companyId   String?   @map(\"company_id\")\n  entity      String // \"Company\",\"Transporter\",\"DeliveryPlant\",\"Vehicle\",\"Product\",\"Ticket\"\n  mapping     Json // { \"csvHeader\": \"dbField\", ... }\n  source      String? // caminho/identificação do CSV\n  success     Boolean? // resumo rápido\n  stats       Json? // linhas lidas, criadas, atualizadas, erros\n  processedAt DateTime? @map(\"processed_at\")\n  createdAt   DateTime  @default(now()) @map(\"created_at\")\n\n  user    User?    @relation(fields: [userId], references: [id])\n  company Company? @relation(fields: [companyId], references: [id])\n\n  @@map(\"import_jobs\")\n}\n",
  "inlineSchemaHash": "e54b6c130412593f3d4b0f4cf9a2b6c445881820078974391beebd21c7ea6112",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"defaultCompanyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"default_company_id\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"defaultCompany\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"DefaultCompany\"},{\"name\":\"memberships\",\"kind\":\"object\",\"type\":\"UserCompanyMembership\",\"relationName\":\"UserToUserCompanyMembership\"},{\"name\":\"importJobs\",\"kind\":\"object\",\"type\":\"ImportJob\",\"relationName\":\"ImportJobToUser\"},{\"name\":\"ticketEvents\",\"kind\":\"object\",\"type\":\"TicketEventLog\",\"relationName\":\"TicketEventLogToUser\"}],\"dbName\":\"users\"},\"Otp\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"otpHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"otp_hash\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"}],\"dbName\":\"otp\"},\"Company\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"vatNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"vat_number\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"postal_code\"},{\"name\":\"address1\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"address_1\"},{\"name\":\"address2\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"address_2\"},{\"name\":\"roles\",\"kind\":\"enum\",\"type\":\"CompanyRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"memberships\",\"kind\":\"object\",\"type\":\"UserCompanyMembership\",\"relationName\":\"CompanyToUserCompanyMembership\"},{\"name\":\"DefaultCompany\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DefaultCompany\"},{\"name\":\"deliveryPlants\",\"kind\":\"object\",\"type\":\"DeliveryPlant\",\"relationName\":\"CompanyToDeliveryPlant\"},{\"name\":\"vehicles\",\"kind\":\"object\",\"type\":\"Vehicle\",\"relationName\":\"TransporterVehicles\"},{\"name\":\"suppliedProducts\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"SupplierProducts\"},{\"name\":\"sentTickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"SupplierTickets\"},{\"name\":\"customerTickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"CustomerTickets\"},{\"name\":\"transporterTickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TransporterTickets\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"ApiKey\",\"relationName\":\"ApiKeyToCompany\"},{\"name\":\"importJobs\",\"kind\":\"object\",\"type\":\"ImportJob\",\"relationName\":\"CompanyToImportJob\"}],\"dbName\":\"companies\"},\"UserCompanyMembership\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"company_id\"},{\"name\":\"roles\",\"kind\":\"enum\",\"type\":\"MembershipRole\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserCompanyMembership\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToUserCompanyMembership\"}],\"dbName\":\"user_company_memberships\"},\"DeliveryPlant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"postal_code\"},{\"name\":\"address1\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"address_1\"},{\"name\":\"address2\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"address_2\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"company_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToDeliveryPlant\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"DeliveryPlantToTicket\"}],\"dbName\":\"delivery_plants\"},\"Vehicle\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plateNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"plate_number\"},{\"name\":\"vehicleType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"vehicle_type\"},{\"name\":\"tareWeight\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"tare_weight\"},{\"name\":\"maxLoadKg\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"max_load_kg\"},{\"name\":\"transporterId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"transporter_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"transporter\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"TransporterVehicles\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToVehicle\"}],\"dbName\":\"vehicles\"},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"density\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"supplierId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"supplier_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"supplier\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"SupplierProducts\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"ProductToTicket\"}],\"dbName\":\"products\"},\"Ticket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"number\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supplierId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"supplier_id\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"customer_id\"},{\"name\":\"transporterId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"transporter_id\"},{\"name\":\"vehicleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"vehicle_id\"},{\"name\":\"deliveryPlantId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"delivery_plant_id\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"product\"},{\"name\":\"externalCode\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"external_code\"},{\"name\":\"direction\",\"kind\":\"enum\",\"type\":\"TicketDirection\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TicketStatus\"},{\"name\":\"grossWeight\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"gross_weight_kg\"},{\"name\":\"tareWeight\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"tare_weight_kg\"},{\"name\":\"netWeight\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"net_weight_kg\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"weighedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"weighed_at\"},{\"name\":\"shareToken\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"share_token\"},{\"name\":\"sharedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"shared_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"supplier\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"SupplierTickets\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CustomerTickets\"},{\"name\":\"transporter\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"TransporterTickets\"},{\"name\":\"vehicle\",\"kind\":\"object\",\"type\":\"Vehicle\",\"relationName\":\"TicketToVehicle\"},{\"name\":\"deliveryPlant\",\"kind\":\"object\",\"type\":\"DeliveryPlant\",\"relationName\":\"DeliveryPlantToTicket\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToTicket\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"TicketDocument\",\"relationName\":\"TicketToTicketDocument\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"TicketEventLog\",\"relationName\":\"TicketToTicketEventLog\"}],\"dbName\":\"tickets\"},\"TicketDocument\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ticketId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"ticket_id\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"DocType\"},{\"name\":\"path\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"ticket\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToTicketDocument\"}],\"dbName\":\"ticket_documents\"},\"TicketEventLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ticketId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"ticket_id\"},{\"name\":\"actorId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"actor_id\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"from\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"to\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"ticket\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToTicketEventLog\"},{\"name\":\"actor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TicketEventLogToUser\"}],\"dbName\":\"ticket_event_logs\"},\"TicketSequence\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"yearMonth\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"year_month\"},{\"name\":\"counter\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"}],\"dbName\":\"ticket_sequences\"},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keyHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"key_hash\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"company_id\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_used_at\"},{\"name\":\"revokedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"revoked_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"ApiKeyToCompany\"}],\"dbName\":\"api_keys\"},\"ImportJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"company_id\"},{\"name\":\"entity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mapping\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"success\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"stats\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"processedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"processed_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ImportJobToUser\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToImportJob\"}],\"dbName\":\"import_jobs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

